import os
import subprocess
import webbrowser
import time
import argparse
from spelltest.discover_spelltests import run_spelltests
from spelltest.yaml_tests import run_yaml_tests

def main():
    parser = argparse.ArgumentParser(
        description='SpellTest: AI testing tool that simulate and evaluate LLM responses using synthetic users',
        epilog='Enjoy using SpellTest!'
    )

    # Create subparsers
    subparsers = parser.add_subparsers(dest='command', help='Available subcommands')

    # 'analyze' subcommand
    analyze_parser = subparsers.add_parser(
        'analyze',
        help='Run an app to analyze the result from the previous simulation',
        description='Analyze the results generated by a previous simulation.'
    )
    analyze_parser.set_defaults(func=run_analysis)
    # Add specific arguments for the analysis here if any.

    # Parse the arguments
    args = parser.parse_args()

    # If no command is provided, run simulation, else run the function associated with the chosen subcommand
    if args.command is None:
        run_simulation()
    else:
        args.func()

def run_simulation():
    import openai
    openai.verify_ssl_certs = False
    run_yaml_tests()
    run_spelltests()


def run_analysis():
    # Get the absolute path to the Streamlit app
    script_dir = os.path.dirname(os.path.abspath(__file__))
    streamlit_app_path = os.path.join(script_dir, "analyze_app", "streamlit_app.py")

    try:
        # Check if the streamlit server is already running, if not start it
        subprocess.check_output("pgrep streamlit", shell=True)
        print("Streamlit app is already running.")
    except subprocess.CalledProcessError:
        # Start the streamlit app as a subprocess
        subprocess.Popen(["streamlit", "run", streamlit_app_path], shell=False)
        print("Started Streamlit app.")

        # To make sure streamlit has enough time to start, otherwise the webpage might load with no server available yet
        time.sleep(5)

    # Automatically open the web page in the default web browser
    webbrowser.open("http://localhost:8501", new=2)


# Include this if you want this script to be runnable directly
if __name__ == "__main__":
    main()
